Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,494. Target Sum,py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        extra = sum(nums) - target
        if len(nums) <= 1 and extra == 0:
            return 1
        if extra % 2 == 1:
            return 0
        memo = {}
        def backtrack(total:int, target: int, i:int):
            if i == len(nums): return 1 if total == target else 0
            if (total, i) in memo: return memo[(total, i)]
            add = backtrack(total + nums[i], target, i + 1)
            sub = backtrack(total - nums[i], target, i + 1)
            memo[(total, i)] = add + sub
            return memo[(total, i)]
        return backtrack(0, target, 0)
Medium,769. Max Chunks to Make Sorted,py
class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        chunks = 0
        x = 0
        for i in range(len(arr)):
            x += arr[i]
            if x == (i * (i + 1)) / 2:
                chunks += 1
        return chunks
Medium,1593. Split a String Into the Max Number of Unique Substrings,py
class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        def countUnique(unique, i, j):
            # if end of string reached
            if i == len(s):
                return 0
            count = 0
            while j < len(s):
                if s[i:j+1] not in unique:
                    cur = s[i:j+1]
                    unique.add(cur)
                    count = max(count, 1 + countUnique(unique, j+1, j+1))
                    unique.remove(cur)
                j += 1
            return count
        # i = left bound (inclusive)
        # j = right bound (exclusive)
        return countUnique(set(), 0, 0)
"""
Time Complexity = O(n^2) (maybe, kinda, idk) -> 1 node with n-1 children, each with n-2 children ...
so like 1 + n-1(n-2) + n-2(n-3) + ... + n-n-1(n-n), which is a big polynomial that rounds 
to n^2 (don't quote me)
Space Complexity = each call has a substr/node to process? so the # of nodes? = O(n^2)
"""
