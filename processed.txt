Medium,2270. Number of Ways to Split Array,py
'''
You are given a 0-indexed integer array nums of length n.

nums contains a valid split at index i if the following are true:

The sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.
    - n - i - 1 = (n - 1) - i = remaining elements
    - i + 1 -> shifting to 1-index -> includes ith element
    - the sum of the first x elements must be >= to the sum of the last x - 1 elements
There is at least one element to the right of i. That is, 0 <= i < n - 1.
    - part cannot be made at the end of arr or at the start -> splits are non-empty

Return the number of valid splits in nums.

return the number of times the sum of the first i + 1 elements >= the remaining elements

*only one split per iteration -> only splitting into two*

i = 0, len(nums) - 1 always fails
len(nums) = big -> O(n) needed

slowest part = finding sum for every range -> need to find sum at every index first (prefix sum)

nums = [10,4,-8,7]
Decision:
    x = 1
    left = 10, right = 4 - 8 + 7 = 5 -> valid
    x = 2
    left = 10 + 4 = right = -8 + 7 = -1 -> valid
    x = 3
    left = 10 + 4 - 8 = 6, right = 7 -> invalid

Generalized:
    for x in [1, len(nums) - 2]:
        if prefix[x] >= prefix[n - 1] - prefix[x]:
            valid part formed
'''
class Solution:
    def waysToSplitArray(self, nums: List[int]) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)

        for i in range(1, n + 1):
            prefix[i] += prefix[i - 1] + nums[i - 1]
        
        valid_part = 0
        for i in range(1, n):
            if prefix[i] >= prefix[n] - prefix[i]:
                valid_part += 1
        
        return valid_part
Easy,2185. Counting Words With a Given Prefix,py
'''
You are given an array of strings words and a string pref.

Return the number of strings in words that contain pref as a prefix.

A prefix of a string s is any leading contiguous substring of s.

prefix at start -> check first len(pref) letters

approach:
    for word in words:
        if pref matches first len(pref) letters in word:
            increment count

can do window check type of thing if slicing less intuitive
i.e.
    if pref[i] == word[j]:
        increment both
    else:
        don't match -> stop immediately
    
    if i == len(pref):
        letters matched len(pref) times AKA same words
'''

class Solution:
    def prefixCount(self, words: List[str], pref: str) -> int:
        count = 0
        for word in words:
            if word[:len(pref)] == pref:
                count += 1
        return count
Medium,1769. Minimum Number of Operations to Move All Balls to Each Box,py
'''
You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box 
is empty, and '1' if it contains one ball.
    - balls initially separate
    - think arr instead of str

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. 
Note that after doing so, there may be more than one ball in some boxes.
    - one ball at a time
    - total balls <= boxes
    - one unit = one adj box = 1 -> ops to any box = 1 * abs(i - j) = 1 unit * num of boxes

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.
    - assuming boxes form a linear path (non-circular), min ops = dist to box (or index)
    - only one target box per query
        - query = each index as the target

Each answer[i] is calculated considering the initial state of the boxes.
    - some value remains constant
        - empty boxes and starting positions

total dist = abs(i1 - j) + abs(i2 - j) + ... + abs(in - j)
           = abs(i1 + i2 + ... + in - j*n) -> for every non-empty box
           = abs(sum - j*n); sum = n*(n+1) / 2, but this fails to remove contributions from empty boxes
        -> = abs(sum - j * n - dist of empty boxes); dist of empty = sum of (empty indices + 1) - j * (num of empty boxes)

bugs out with boxes = "001011", indices 3, 4
because of symmetry -> some indices are negated. to offset, just split indices centered about j (so both sides remain positive)
eq doesn't change (i.e. abs(7-5) = abs(3-5)) so only change is to sum the intervals sep -> (prefix sum)

'''
class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        n = len(boxes)
        prefix = [0] * (n + 1)
        not_empty = [0] * (n + 1)

        for i in range(1, n + 1):
            if boxes[i - 1] == '1':
                prefix[i] = i
                not_empty[i] = 1
            not_empty[i] += not_empty[i - 1]
            prefix[i] += prefix[i - 1]
        
        answer = [0] * n
        for i in range(1, n + 1):
            left = abs(prefix[i] - i * not_empty[i])
            right = prefix[n] - prefix[i] - i * (not_empty[n] - not_empty[i])
            answer[i - 1] = left + right
            print(left, right)
        return answer
Easy,1408. String Matching in an Array,py
'''
Given an array of string words, return all strings in words that is a substring of another word.
You can return the answer in any order.
    - return word if word is found in another word

A substring is a contiguous sequence of characters within a string
    - sub < main
    - ltrs are consecutive

len(words), len(words[i]) = small -> bf allowed
bf = search for word in every word = O(n * m)
'''
class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        s = ' '.join(words)
        return [word for word in words if s.count(word) > 1]
Medium,2466. Count Ways to Build Good Strings,py
'''
Given the integers zero, one, low, and high, we can construct a string by starting with an empty 
string, and then at each step perform either of the following:

Append the character '0' zero times.
Append the character '1' one times.
This can be performed any number of times.
    - must append all at once
        i.e. if one = 5, zero = 1 -> append 1 = 11111
    - if one, zero > high, cannot use respective number
        - 1 <= zero, one <= low -> dont need to worry

A good string is a string constructed by the above process having a length between low and high (inclusive).
    - consider all strs low ≤ len ≤ high

Return the number of different good strings that can be constructed satisfying these properties.
    - order of strs matter -> no dups
        - keep track of strs made -> if sim
        - use combinatorics -> handles dups BUT factorials

Since the answer can be large, return it modulo 109 + 7.
    - applied at the end

goal: form all possible bit strs from len high -> low, containing zero 0s and one 1s, and return the amount % 1000000007

Topics:
    - counting/combinations
        - how many possibility per index -> count[i] = count[i-1] * possibility; 0 <= possibility <= 2
    - combinatorics
        - how many ways can one fit into [low, high]?

1 <= low <= high <= 10**5
    - O(n) approach needed, sim too slow
    - (high - low) = 10***5 - 1 wc, range too large to iterate


low = 3, high = 3, zero = 1, one = 1
Decision (sim):
    if len > high: stop
    count = 1 if cur bit str >= low else 0

    append one 1 (if len + one <= high) -> len += one, append 0/1 (if ...)
    append zero 0 (if len + zero <= high) -> len += zero, append 0/1 (if ...)


_ _ _ -> each slot can be either zero/one so 2*2*2 -> why? if none chosen one/zero can fit in low=high=3 spots

low = 3, high = 3, zero = 1, one = 1
Decision (counting):
    if one + i <= high:
        count[i] += count[i-1]
    if zero + i <= high:
        count[i] += count[i-1]
    
    if neither:
        break -> if none can fit at that point, none can fit later
    
    sum all count[i]s where low - 1 < i < high
'''

class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        count = [0] * (high + 1)
        count[0] = 1

        res = 0
        for i in range(1, high + 1):
            count[i] = ((count[i-one] if i >= one else 0) + (count[i-zero] if i>=zero else 0)) % 1000000007
            if i >= low and i <= high:
                res = (res + count[i])% 1000000007
        return res

        #     if i - one > -1: count[i] += count[i - one]
        #     if i - zero > -1: count[i] += count[i - zero]
        #     if i >= low:
        #         res += count[i]
        # return res % 1000000007

        # @cache
        # def count_cont(length: int, low: int, high: int, one: int, zero: int):
        #     if length > high: return 0

        #     count = 1 if length >= low else 0

        #     add_one = 0
        #     if one + length <= high:
        #         add_one = count_cont(length + one, low, high, one, zero) % 1000000007

        #     add_zero = 0
        #     if zero + length <= high:
        #         add_zero = count_cont(length + zero, low, high, one, zero) % 1000000007
            
        #     count += add_one + add_zero
        #     return count % 1000000007

        # return count_cont(0, low, high, zero, one)
Medium,2461. Maximum Sum of Distinct Subarrays With Length K,py
class Solution:
    def maximumSubarraySum(self, nums: List[int], k: int) -> int:
        max_win = 0 # maximum k-length subarray sum
        win_sum = 0 # current k-length subarray sum
        win_nums = collections.defaultdict(int) # numbers in cur k-length subarray

        n = len(nums)
        left, right = 0, 0

        while right < n: # expand right bound to end of array
            win_nums[nums[right]] += 1
            win_sum += nums[right]

            # contract window if any duplicates arise
            while left <= right and win_nums[nums[right]] > 1:
                # print(f'window: {nums[left: right + 1]}')
                win_sum -= nums[left]
                win_nums[nums[left]] -= 1
                left += 1
            
            if right - left + 1 == k: # if valid k-length window formed
                max_win = max(max_win, win_sum)

                # shift left bound forward
                win_nums[nums[left]] -= 1
                win_sum -= nums[left]

                left += 1

            # shift right bound forward
            right += 1
        
        return max_win
Medium,2381. Shifting Letters II,py
class Solution:
    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:
        val = [[False, 0] for _ in range(len(s) + 1)]
        for i in range(len(shifts)):
            start, end, direction = shifts[i]
            sign = 1 if direction else -1
            val[start][0], val[start][1] = True, val[start][1] + sign
            val[end + 1][0], val[end + 1][1] = True, val[end + 1][1] - sign
        
        shift = 0
        res = []
        for i in range(len(s)):
            if val[i][0]:
                shift += val[i][1]
            
            res.append(chr((ord(s[i]) + shift - ord('a')) % 26 + ord('a')))
        
        return ''.join(res)
Medium,2257. Count Unguarded Cells in the Grid,py
from typing import List

class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        matrix = [['U' for _ in range(n)] for _ in range(m)]

        for r, c in guards:
            matrix[r][c] = 'G'

        for r, c in walls:
            matrix[r][c] = 'W'


        for r, c in guards:
            i = r - 1
            while i > -1 and matrix[i][c] != 'W' and matrix[i][c] != 'G':
                matrix[i][c] = 'X'
                i -= 1

            i = r + 1
            while i < m and matrix[i][c] != 'W' and matrix[i][c] != 'G':
                matrix[i][c] = 'X'
                i += 1
            
            i = c - 1
            while i > -1 and matrix[r][i] != 'W' and matrix[r][i] != 'G':
                matrix[r][i] = 'X'
                i -= 1
            
            i = c + 1
            while i < n and matrix[r][i] != 'W' and matrix[r][i] != 'G':
                matrix[r][i] = 'X'
                i += 1

        unguarded = 0
        for r in range(m):
            for c in range(n):
                if matrix[r][c] == 'U':
                    unguarded += 1
        return unguarded

        """
        approach #2 (brute-force):
            mark all cells visible to guards as 'guarded'
            stop if wall or bounds
        """

        # seen = set((r, c) for r, c in guards)
        # walls = set((r, c) for r, c in walls)

        # DIR = [(1, 0), (0, 1), (-1, 0), (0, -1)] # down, right, up, left
        # q = collections.deque([(r, c, False, False, False, False) for r, c in guards])
        # while q:
        #     for _ in range(len(q)):
        #         cur_r, cur_c, up, down, left, right = q.popleft()
        #         if (cur_r, cur_c) in walls:
        #             continue

        #         seen.add((cur_r, cur_c)) 

        #         if not up and not down and not left and not right: # if a guard
        #             for dr, dc in DIR:
        #                 r, c = cur_r + dr, cur_c + dc
        #                 if (r < m and r > -1) and (c < n and c > -1): # if in bound
        #                     if dc < 0: # left
        #                         q.append((r, c, False, False, True, False))
        #                     elif dc > 0: # right
        #                         q.append((r, c, False, False, False, True))
        #                     elif dr < 0: # up
        #                         q.append((r, c, True, False, False, False))
        #                     elif dr > 0: # down
        #                         q.append((r, c, False, True, False, False))
        #         else: # else (checking what a guard sees)
        #             if left and cur_c - 1 > -1:
        #                 q.append((cur_r, cur_c - 1, False, False, True, False))
        #             elif right and cur_c + 1 < n:
        #                 q.append((cur_r, cur_c + 1, False, False, False, True))
        #             elif up and cur_r - 1 > -1:
        #                 q.append((cur_r - 1, cur_c, True, False, False, False))
        #             elif down and cur_r + 1 < m:
        #                 q.append((cur_r + 1, cur_c, False, True, False, False))

        # return m * n - len(seen) - len(walls)

        """
        notes: guards see in 4 direction infinite distance
               walls can obstruct view
               count how many squares not in view (blocked or diags?)
               can't see past bounds
               can overlap
        
        approach (bfs type):
            for each guard in graph;
                store into queue


            for each saved guard:
                for each direction
                    go until a wall or OOB
                    save every cell on the way
            
            unguarded cells = total cells - guarded - walls, total cells = area of graph
        """
Medium,2516. Take K of Each Character From Left and Right,py
class Solution:
    def takeCharacters(self, s: str, k: int) -> int:
        if k == 0:
            return 0

        n = len(s)
        count = [0] * 3
        for i in range(n):
            count[ord(s[i]) - ord('a')] += 1

        if count[0] < k or count[1] < k or count[2] < k:
            return -1


        left, right = 0, 0
        max_win = -1
        while right < n:
            count[ord(s[right]) - ord('a')] -= 1

            while left <= right and (count[0] < k or
                                    count[1] < k or 
                                    count[2] < k):
                count[ord(s[left]) - ord('a')] += 1
                left += 1
            
            max_win = max(max_win, right - left + 1)

            right += 1


        return n - max_win
Hard,1639. Number of Ways to Form a Target String Given a Dictionary,py
'''
You are given a list of strings of the same length words and a string target.
    - len(words[i]) = n

Your task is to form target using the given words under the following rules:
    target should be formed from left to right.

    To form the ith character of target, you can choose the kth character of
    the jth string in words if target[i] = words[j][k].
        - 

    Once you use the kth character of the jth string of words, you can no longer use
    the xth character of any string in words where x <= k. In other words, all characters to the left of or
    at index k become unusuable for every string.
        - reduces number of letters available per choice
            - must reduce losses to ensure letter availability
            - must use the first occurence of letter to have other letters to access
        - cannot use the same kth letter since x <= k
    
    Repeat the process until you form the string target.
        - max of len(target) choices to be made; len(target) <= n

Notice that you can use multiple characters from the same string in words provided the conditions above are met.
    - can use the same word as long as you remove the char used and chars prior

Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.
    - can use diff words as starting points/sources of chars -> (branching)


len(words) -> small (O(n2) approach works)

(0-indexed)

goal: return number of ways to form target using chars in words while following condition


words = ["acca","bbbb","caca"], target = "aba"
start w/ i = 0

Decision:
stop if no more letters available (j == n)
stop if target is formed (k == len(target))

for i words to go through:
    if word[i][j] == target[k]: choose i -> remove first j letters, find k + 1

return



TC = O(n*m* len(target)) -> n*m possible letters to go through * len(target) letters to find
'''
class Solution:
    def numWays(self, words: List[str], target: str) -> int:
        @cache
        def find_next_ltr(j: int, k: int) -> int:
            if k == len(target): return 1 # handles bother cases where target forms (all ltrs exhausted or not)
            if j == len(words[0]): return 0 # all ltrs are exhausted and target did not form

            formed = 0 # number of ways target forms at this point
            for i in range(len(words)):
                for x in range(j, len(words[0])):
                    if words[i][x] == target[k]:
                        formed += find_next_ltr(x + 1, k + 1) # x + 1 to exclude up to jth ltr

            return formed % (7 + 10**9)
        
        return find_next_ltr(0, 0)
Medium,2415. Reverse Odd Levels of Binary Tree,py
class Solution:
    def reverseOddLevels(self, root):
        if not root:
            return None

        queue = [root]
        level = 0

        while queue:
            size = len(queue)
            current_level_nodes = []

            # Process all nodes at the current level.
            for _ in range(size):
                node = queue.pop(0)
                current_level_nodes.append(node)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            # reverse values while nodes maintain children
            if level % 2 == 1:
                left, right = 0, len(current_level_nodes) - 1
                while left < right:
                    tmp = current_level_nodes[left].val
                    current_level_nodes[left].val = current_level_nodes[
                        right
                    ].val
                    current_level_nodes[right].val = tmp
                    left += 1
                    right -= 1

            level += 1

        return root
Medium,2530. Maximal Score After Applying K Operations,py
class Solution:
    def maxKelements(self, nums: List[int], k: int) -> int:
        def ceil(n): # -> ceiling function
            return n // 3 if n % 3 == 0 else (n // 3) + 1
        

        # turning default min-heap to max-heap
        heap = [-num for num in nums]
        heapq.heapify(heap)

        i = 0
        score = 0
        # add highest points to score each turn until k turns
        while i < k:
            i += 1
            points = -heapq.heappop(heap)
            score += points
            heapq.heappush(heap, -ceil(points))

        return score

        """
        Approach is straight-forward: just add the biggest number in the list, divide it by 3, repeat

        Time Complexity = heappush + heappop, k times = O(2klogn) ~ O(klogn)
        Space Complexity = heap = O(n)
        """
Medium,2559. Count Vowel Strings in Ranges,py
'''
You are given a 0-indexed array of strings words and a 2D array of integers queries.
    - each index contains a single str
Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.
    - ri + 1 to include ri
    - if s[0], s[n-1] in vowel -> set
    - checking every range = O(n2) -> too slow, must know values before hand (preprocess) + a way to find values in a range (prefix sum)
Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

len(words) = large -> O(n) needed

Approach:
    figure out # of strings encountered that start and end w/ vowel at every index -> single pass
        for ever str in words
            if end and start == vowl -> increment total so far
    for every query find the number of 'good' strings within that range; i.e. prefix[r] (total encountered) - prefix[l] (excluded portion)

TC = O(n) -> single pass
SC = O(n + m) -> prefix + output
'''
class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        n, m = len(words), len(queries)
        prefix = [0] * (n + 1)
        answer = [0] * m
        vowel = set(('a', 'e', 'i', 'o', 'u'))
        for i in range(1, n + 1):
            if words[i - 1][0] in vowel and words[i - 1][len(words[i - 1]) - 1] in vowel:
                prefix[i] += 1 
            prefix[i] += prefix[i - 1]
        
        for i in range(m):
            l, r = queries[i]
            answer[i] = prefix[r + 1] - prefix[l]
        return answer
Medium,2563. Count the Number of Fair Pairs,py
class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        # upper bound
        def find_right(left, right, target):
            while left < right:
                mid = left + (right - left) // 2
                if nums[mid] > target:
                    right = mid
                else:
                    left = mid + 1
            return left
        
        # lower bound
        def find_left(left, right, target):
            while left < right:
                mid = left + (right - left) // 2
                if nums[mid] >= target:
                    right = mid
                else:
                    left = mid + 1
            
            return left
    
        nums.sort()
        n = len(nums)
        pairs = 0

        for i in range(n - 1):
            # binary search min nums that stay within range
            left = find_left(i + 1, n, lower - nums[i])
            right = find_right(i + 1, n, upper - nums[i])

            pairs += right - left
        
        return pairs
        

    # TC = O(nlogn), both sorting and searching
    # SC = O(1), glorified two pointer problem
Medium,2684. Maximum Number of Moves in a Grid,py
class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
        # possible moves given
        possible_moves = [(-1, 1), (0, 1), (1, 1)]

        # used to save moves from a specific point
        memo = {}

        def dfs(row, col):
            # if square was already visited -> return max moves from that point on
            if (row, col) in memo:
                return memo[(row, col)]
            
            max_moves = -1
            for r, c in possible_moves:
                dr, dc = row + r, col + c
                # if next move is in the grid
                if (dr > -1 and dr < len(grid)) and (dc > -1 and dc < len(grid[0])):
                    if grid[dr][dc] > grid[row][col]:
                        max_moves = max(max_moves, dfs(dr, dc))
            
            # save max moves found at that point
            memo[(row, col)] = max_moves + 1
            return 1 + max_moves

        max_moves = -1
        # check down the first column 
        for i in range(len(grid)):
            max_moves = max(max_moves, dfs(i, 0))
        
        return max_moves

        # Time Complexity = O(m*n), since (worst-case) I visit every single cell/square
        # Space Complexity = O(m*n), since (worst-case) I cache every single cell/sqaure
Medium,2779. Maximum Beauty of an Array After Applying Operation,py
class Solution:
    def maximumBeauty(self, nums: List[int], k: int) -> int:
        nums.sort()
        left, right = 0, 0
        n = len(nums)

        window_len = -1
        while right < n:
            right += 1
            window_len = max(window_len, right - left)
            while right < n and left < right and nums[left] + k < nums[right] - k:
                left += 1
            
        return max(window_len, right - left)

        # TC = O(nlogn) -> sorting
        # SC = O(n) -> sorting
Medium,2825. Make String a Subsequence Using Cyclic Increments,py
class Solution:
    def canMakeSubsequence(self, str1: str, str2: str) -> bool:
        n, m = len(str1), len(str2)
        if n < m:
            return False

        i, j = 0, 0
        while i < n and j < m:
            if str1[i] == str2[j] or (ord(str1[i]) + 1 - ord('a')) % 26 == (ord(str2[j]) - ord('a')):
                j += 1
            i += 1
        
        return j == m

        # TC = O(n) -> single pass through n letters * O(1) operations
        # SC = O(1) -> constant amount of variables used
Hard,2872. Maximum Number of K-Divisible Components,py
class Solution:
    def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:
        adj = collections.defaultdict(list)
        for a, b in edges:
            adj[a].append(b)
            adj[b].append(a)
        
        count = [0]
        def dfs(root, parent):
            cur_val = values[root]
            for node in adj[root]:
                if node != parent:
                    cur_val += dfs(node, root)
                
            if cur_val % k == 0:
                print(f'valid tree rooted at {root}')
                count[0] += 1

            return cur_val

        
        dfs(0, -1)
        return count[0]
Medium,2924. Find Champion II,py
class Solution:
    def findChampion(self, n: int, edges: List[List[int]]) -> int:
        losers = [False] * n

        for a, b in edges:
            losers[b] = True

        winner = -1
        num_win = 0
        for team in range(n):
            if not losers[team]:
                winner = team
                num_win += 1

        if num_win == 1:
            return winner
            
        return -1 


        # TC = O(E), there may or may not be more edges than nodes (depends on the graph)
        # SC = O(n), losers set contains between 0 to n teams
Medium,2938. Separate Black and White Balls,py
class Solution:
    def minimumSteps(self, s: str) -> int:
        n = len(s)
        swaps = 0
        # all white balls belong on the left side -> start of str
        w = 0
        # ensure you start where you can perform swaps
        while w < n and s[w] == '0' :
            w += 1

        # if already separated, no swapping needed
        if w == n:
            return swaps
        
        # swaps = dist to closest white ball
        for i in range(w, n):
            if s[i] == '0':
                swaps += i - w
                w += 1
        return swaps

        """
        Time Comlpexity = going through n letters and arithmetic = O(n+1) ~ O(n)
        Space Complexity = variables = O(1)
        """
Medium,2981. Find Longest Special Substring That Occurs Thrice I,py
class Solution:
    def maximumLength(self, s: str) -> int:
        intervals = collections.defaultdict(list)
        start, end = 0, 0
        while end < len(s):
            start = end
            while end < len(s) and s[start] == s[end]:
                end += 1
            intervals[s[start]].append((start, end))

        matrix = [[0 for _ in range(len(s) + 1)] for _ in range(26)]
        for ltr in intervals:
            print(intervals[ltr])
            for start, end in intervals[ltr]:
                size = end - start
                for i in range(1, size + 1):
                    matrix[ord(ltr) - ord('a')][i] += size - i + 1
        
        candidet = -1
        for ltr in intervals:
            row = matrix[ord(ltr) - ord('a')]
            for i in range(len(row)):
                if row[i] >= 3:
                    candidet = max(candidet, i)

        return candidet
Easy,3042. Count Prefix and Suffix Pairs I,py
'''
You are given a 0-indexed string array words.

Let's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:

isPrefixAndSuffix(str1, str2) returns true if str1 is both a 
prefix and a suffix of str2, and false otherwise.
    - same pattern at start + end
    - str1 is given -> pattern is given
    - str1 must be smaller than str 2

For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix,
but isPrefixAndSuffix("abc", "abcd") is false.
    - prefix and suffix can intersect / don't need to be distinct

Return an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.
    - only one pair in list
    - guaranteed that str1 comes before str2

make isPrefixAndSuffix -> use as condition to find pair -> return number of pairs found

isPrefixAndSuffix defn:
    use two windows (one at start and other at end):
        if both left and right window == eachother and target -> expand window
        else -> stop (return False)

        repeat until window of len(target) reached
        return True

len(words), len(words[i]) = small -> O(n2) allowed

no way of knowing which str is str2 and can't sort since order matters so bf
bf = for every str:
        cur = current str
        for every str before cur:
            if len(cur) < len(str) and isPrefixAndSuffix is True:
                count_of_pair ++
    return count_of_pair
'''

class Solution:
    def countPrefixSuffixPairs(self, words: List[str]) -> int:
        n = len(words)
        count_of_pairs = 0
        for i in range(n):
            for j in range(i + 1, n):
                if words[j].startswith(words[i]) and words[j].endswith(words[i]):
                    count_of_pairs += 1
        return count_of_pairs
Medium,3097. Shortest Subarray With OR at Least K II,py
class Solution:
    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:
        min_length = float("inf")
        window_start = window_end = 0
        bit_counts = [0] * 32  # Tracks count of set bits at each position

        # Expand window until end of array
        while window_end < len(nums):
            # Add current number to window
            self._update_bit_counts(bit_counts, nums[window_end], 1)

            # Contract window while OR value is valid
            while (
                window_start <= window_end
                and self._convert_bits_to_num(bit_counts) >= k
            ):
                # Update minimum length found so far
                min_length = min(min_length, window_end - window_start + 1)

                # Remove leftmost number and shrink window
                self._update_bit_counts(bit_counts, nums[window_start], -1)
                window_start += 1

            window_end += 1

        return -1 if min_length == float("inf") else min_length

    def _update_bit_counts(
        self, bit_counts: list, number: int, delta: int
    ) -> None:
        # Update counts for each set bit in the number
        for pos in range(32):
            if number & (1 << pos):
                bit_counts[pos] += delta

    def _convert_bits_to_num(self, bit_counts: list) -> int:
        # Convert bit counts to number using OR operation
        result = 0
        for pos in range(32):
            if bit_counts[pos]:
                result |= 1 << pos
        return result
Medium,3133. Minimum Array End,py
class Solution:
    def minEnd(self, n: int, x: int) -> int:
        result = x
        n -= 1  # Reducing n by 1 to exclude x from the iteration
        mask = 1

        # Step 1: Iterate while n > 0, using mask for bit positions
        while n > 0:
            # Step 2: If the corresponding bit in x is 0
            if (mask & x) == 0:
                # Set the bit in result based on least significant bit of n
                result |= (n & 1) * mask
                # Shift n right by 1 to process next bit
                n >>= 1
            # Shift mask left by 1 for next iteration
            mask <<= 1

        return result
Hard,3203. Find Minimum Diameter After Merging Two Trees,py
class Solution:
    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:
        adj1 = collections.defaultdict(list)
        for a, b in edges1:
            adj1[a].append(b)
            adj1[b].append(a)
        
        adj2 = collections.defaultdict(list)
        for u, v in edges2:
            adj2[u].append(v)
            adj2[v].append(u)
        
        cur_max_depths = [-1, -1]
        roots = [0, 0]
        def find_root(tree: int, root: int, parent: int, depth: int, edges: dict) -> None:
            if len(edges[root]) == 1 and depth > cur_max_depths[tree]:
                cur_max_depths[tree] = depth
                roots[tree] = root
            
            for node in edges[root]:
                if node != parent:
                    find_root(tree, node, root, depth + 1, edges)
                

        def dfs(root: int, parent: int, edges: dict) -> int:
            path_len = 0
            for node in edges[root]:
                if node != parent:
                    path_len = max(path_len, dfs(node, root, edges))
            
            return path_len + 1    
        
        find_root(0, 0, -1, 0, adj1)
        find_root(1, 0, -1, 0, adj2)

        a, b = dfs(roots[0], -1, adj1) - 1, dfs(roots[1], -1, adj2) - 1

        return max(a, b, ((a + 1) // 2) + ((b + 1) // 2) + 1)
